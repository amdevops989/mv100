version: '3.8'

services:
  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    environment:
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://localhost:9094
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - ALLOW_PLAINTEXT_LISTENER=yes
    ports:
      - "9092:9092"
      - "9094:9094"
      - "9093:9093"

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      - kafka
    ports:
      - "8080:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=local-cluster
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
      - KAFKA_CLUSTERS_0_READONLY=false
      - KAFKA_CLUSTERS_0_TOPIC_AUTO_CREATE=true

  postgres:
    image: postgres:14
    container_name: postgres
    environment:
      POSTGRES_DB: mv100db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports: ["5432:5432"]
    command:
      - postgres
      - -c
      - wal_level=logical
      - -c
      - max_wal_senders=10
      - -c
      - max_replication_slots=10
      - -c
      - max_wal_size=1GB
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./sql/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    depends_on:
      - postgres
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "5050:80"

  connect:
    image: debezium/connect:2.7.1.Final
    container_name: connect
    depends_on:
      - kafka
      - postgres
    ports:
      - "8083:8083"
    environment:
      BOOTSTRAP_SERVERS: "kafka:9092"
      GROUP_ID: "1"
      CONFIG_STORAGE_TOPIC: "connect-configs"
      OFFSET_STORAGE_TOPIC: "connect-offsets"
      STATUS_STORAGE_TOPIC: "connect-status"
      KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      KEY_CONVERTER_SCHEMAS_ENABLE: "false"
      VALUE_CONVERTER_SCHEMAS_ENABLE: "false"

  redis:
    image: redis:7
    container_name: redis
    ports:
      - "6379:6379"
    command: ["redis-server", "--save", "60", "1", "--appendonly", "yes"]
    volumes:
      - redisdata:/data

  auth:
    build:
      context: ./services/auth
    container_name: auth
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - JWT_SECRET=supersecretkey
      - REDIS_URL=redis://redis:6379
      - PGUSER=appuser
      - PGPASSWORD=appuser
      - PGHOST=postgres
      - PGDATABASE=mv100db
      - PGPORT=5432
    depends_on:
      - postgres
      - redis
      - kafka

  catalog:
    build:
      context: ./services/catalog
    container_name: catalog
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - PGUSER=appuser
      - PGPASSWORD=appuser
      - PGHOST=postgres
      - PGDATABASE=mv100db
      - PGPORT=5432
    depends_on:
      - postgres
      - kafka

  cart:
    build:
      context: ./services/cart
    container_name: cart
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=development
      - PGUSER=appuser
      - PGPASSWORD=appuser
      - PGHOST=postgres
      - PGDATABASE=mv100db
      - PGPORT=5432
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=supersecretkey
    depends_on:
      - postgres
      - redis
      - kafka

  frontend:
    build:
      context: ./frontend
    container_name: frontend
    ports:
      - "8081:80"
    depends_on:
      - auth
      - catalog
      - cart

volumes:
  pgdata:
  redisdata:
